apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: header-propagation-filter
  namespace: default
spec:
  workloadSelector:
    labels:
      app: service-a
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: envoy.filters.http.router
      patch:
        operation: MERGE
        value:
          name: envoy.filters.http.header_to_metadata
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config
            request_rules:
              - header: x-api-version
                on_header_present:
                  metadata_namespace: envoy.lb
                  key: api_version
                  type: STRING
                on_header_missing:
                  metadata_namespace: envoy.lb
                  key: api_version
                  value: default
                  type: STRING
                remove: false
    # 添加 Lua filter 来处理 header 传递
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: envoy.filters.http.router
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              function envoy_on_request(request_handle)
                request_handle:logInfo("=================== LUA FILTER EXECUTED ===================")
                local metadata = request_handle:streamInfo():dynamicMetadata():get("envoy.lb")
                request_handle:logInfo("=================== METADATA: " .. tostring(metadata) .. " ===================")
                if metadata then
                  local version = metadata["x-api-version"]
                  request_handle:logInfo("=================== VERSION: " .. tostring(version) .. " ===================")
                  if version then
                    request_handle:headers():add("x-api-version", version)
                    request_handle:logInfo("=================== HEADER ADDED ===================")
                  end
                end
              end
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: propagate-headers
spec:
  host: "*.default.svc.cluster.local"
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 3
    connectionPool:
      http:
        useClientProtocol: true